import time
import machine
from machine import Pin
from time import sleep
from stepmotor import StepMotor
from display import Display
from infrared import Infrared
from button import Button
from led import LED
from buzzer import *  # include anche le note definite
from connectionBrokerMQTT import Connector
from boot import WiFiConnector
from umqtt.simple import MQTTClient


# Inizializzazione dispositivi - aggiungere led a inizializzazione e callback come azione (accensione dopo la rotazione)
buzzer = BUZZER(14, duty=512)
s1 = StepMotor(26,25,33,32)
ir = Infrared(15)
bt1 = Button(19)
d = Display(22,21)
led = LED(17)

# Mostra logo ad accensione 
anemone = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x3f\xf8\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x3f\xfb\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x7f\xe7\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x7f\xcf\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x3f\x9f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf9\xff\x3f\x3f\xf1\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfe\xff\x9f\x3f\x1f\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\x3f\xcf\x7c\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xcf\xe6\x33\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xf1\xe3\xc3\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x0f\xf0\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\x9f\xf9\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf8\x7e\x1f\xf9\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\xcf\xf3\x1f\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\xc0\x07\xf3\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\x3c\xf3\xfc\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\xfc\xf9\xff\x3f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xc7\xfc\xfc\xff\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf9\xfc\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xf3\xfe\x7f\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xe7\xfe\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xdf\xfe\x7f\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x1f\xfc\x3f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x80\xc0\xe3\xfc\x70\x0c\x07\x80\xe0\x63\xfe\x00\x00\x00\x00\x07\xc1\xf0\xe7\xfc\x78\x3c\x3f\xf8\xf0\xf3\xfe\x00\x00\x00\x00\x0f\xc1\xf8\xe7\x80\x7c\x7c\x78\x7c\xfc\xf3\x80\x00\x00\x00\x00\x1e\xe1\xfc\xe7\xfc\x7e\xfc\xf0\x1c\xfe\xf3\xfc\x00\x00\x00\x00\x1c\xf1\xdf\xe7\xfc\x77\xfc\xe0\x1c\xef\xf3\xfc\x00\x00\x00\x00\x3f\xf9\xc7\xe7\x80\x73\x9c\xf8\x3c\xe3\xf3\x80\x00\x00\x00\x00\x7e\xb9\xc3\xe7\xfc\x71\x1c\x7f\xf8\xe1\xf3\xfe\x00\x00\x00\x00\x70\x1d\xc0\xe7\xfc\x70\x1c\x0f\xe0\xe0\xf3\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
d.show_image(anemone)

buzzer.stop()

# Funzioni di callback e topic MQTT
topic_pub = b"dispenser/receivedPill"      # topic dove l'ESP pubblica lo stato (presa medicina)
topic_sub = b"dispenser/pillDelivery"     # topic da cui l'ESP riceve comandi (es. 'avvia', 'resetta')


# Funzione chiamata quando arriva un messaggio MQTT sul topic_sub
def sub_callback(topic, msg):
    msg = msg.decode()
    print("ðŸ“© Messaggio ricevuto:", topic, msg) # messaggio da camviare, ricevuto da interfaccia su esp32
    if topic == topic_sub :
        s1.return_to_home()
        giorno,fascia = msg.split("|")
        client.publish(topic_pub,"Promemoria: Ã¨ ora di prendere la pillola")
        buzzer.play(MELODY, wait=200)
        s1.rotate_by_day(giorno,fascia)
        d.show_text("Preleva pillola") # da aggiustare frase


# Inizializza gli oggetti e i dispositivi
wifi = WiFiConnector(ssid='iPhone di Maurizio', password='asdfghjkl')
sta_if = wifi.connect()

mqtt = Connector(
    mqtt_server="broker.hivemq.com",
    topic_sub=topic_sub,
    sub_callback=sub_callback
)


# Connessione iniziale
try:
    client = mqtt.connect_and_subscribe()
except OSError:
    mqtt.restart_and_reconnect()

# Interrupt sensibile al click del bottone , utile al ritorno a casa.
bt1.set_irq(s1,client,topic_pub)


# Loop principale
while True:
    client.check_msg()  # Controlla messaggi MQTT in arrivo - # il messaggio qui Ã¨ un vincolo
    # per simulare; in eealtÃ  ciÃ² che invoca la callback non Ã¨ un messaggio nel 
    # nostro caso ma corrisponde all'i-esimo orario dell'i-esimo girono in cui deve 
    # prendere la medicina l'utente. 
    if (ir.value == 0):
        client.publish(topic_pub,"L'utente ha correttamente prelevato la pillola") # messaggio da cabmiare, inviato all'user su interfaccia
        d.show_text("Pillola prelevata") # da aggiustare frase
        sleep(60000)
        client.publish(topic_pub,"Ritorno in posizione di start")
        d.show_text("Ritorno in posizione di start") # da aggiustare frase
        s1.return_to_home
    

