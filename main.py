from machine import Pin
from time import sleep
import time
import machine

from stepmotor import StepMotor
from display import Display
from buzzer import *  # include anche le note definite
from connectionBrokerMQTT import Connector
from boot import WiFiConnector
import MQTTTopics
from umqtt.simple import MQTTClient


#display
anemone = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x3f\xf8\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x3f\xfb\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x7f\xe7\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x7f\xcf\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x3f\x9f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf9\xff\x3f\x3f\xf1\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xfe\xff\x9f\x3f\x1f\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\x3f\xcf\x7c\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xcf\xe6\x33\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xf1\xe3\xc3\xff\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x0f\xf0\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\x9f\xf9\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf8\x7e\x1f\xf9\xff\xff\x80\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\xcf\xf3\x1f\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\xc0\x07\xf3\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xff\x3c\xf3\xfc\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xfc\xfc\xf9\xff\x3f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xc7\xfc\xfc\xff\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\xf9\xfc\xff\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xf3\xfe\x7f\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xe7\xfe\xff\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xff\xdf\xfe\x7f\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x1f\xfc\x3f\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x80\xc0\xe3\xfc\x70\x0c\x07\x80\xe0\x63\xfe\x00\x00\x00\x00\x07\xc1\xf0\xe7\xfc\x78\x3c\x3f\xf8\xf0\xf3\xfe\x00\x00\x00\x00\x0f\xc1\xf8\xe7\x80\x7c\x7c\x78\x7c\xfc\xf3\x80\x00\x00\x00\x00\x1e\xe1\xfc\xe7\xfc\x7e\xfc\xf0\x1c\xfe\xf3\xfc\x00\x00\x00\x00\x1c\xf1\xdf\xe7\xfc\x77\xfc\xe0\x1c\xef\xf3\xfc\x00\x00\x00\x00\x3f\xf9\xc7\xe7\x80\x73\x9c\xf8\x3c\xe3\xf3\x80\x00\x00\x00\x00\x7e\xb9\xc3\xe7\xfc\x71\x1c\x7f\xf8\xe1\xf3\xfe\x00\x00\x00\x00\x70\x1d\xc0\xe7\xfc\x70\x1c\x0f\xe0\xe0\xf3\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
d = Display(22,21)
d.show_image(anemone)

#stepmotor
#s1 = StepMotor(26,25,33,32)
#s1.rotate_by_day('TUE')


# Inizializzazione buzzer 

MELODY = [P,SOL,LA,SI,DOd5,SOL,LA,SI,DOd5,
         LAb,SIb,DO5,RE5,LAb,SIb,DO5,RE5,
         LA,SI,DOd5,MIb5,LA,SI,DOd5,MIb5,P,
         LA,SIb,SI,DO5,DO5,P]

buzzer = BUZZER(14, duty=512)

# Funzioni di callback e topic MQTT
topic_pub = b"dispenser/avviso"      # topic dove l'ESP pubblica lo stato (presa medicina)
topic_sub = b"dispenser/comando"     # topic da cui l'ESP riceve comandi (es. 'avvia', 'resetta')


# Funzione chiamata quando arriva un messaggio MQTT sul topic_sub
def sub_callback(topic, msg):
    print("üì© Messaggio ricevuto:", topic, msg) 
    if topic == topic_sub:
        # giorno_fascia = topic.split("/")[-1]
        # if giorno_fascia == "lunedi_mattina" and msg == b"avvia":
         #   suona_buzzer() 
        if msg == b"avvia":
            buzzer.play(MELODY, wait=200)
            # funzione per rotazione dello step motor corrispondente al giorno e all'ora ( al topic) del messaggio 
            # funzione per acensione del led sepre in funzione del topic
        elif msg == b"resetta":
            print("‚Ü©Ô∏è Reset alla posizione di partenza")
            led.off()  # Spegne il LED come esempio di reset


# Inizializza gli oggetti e i dispositivi
wifi = WiFiConnector(ssid='Wokwi-GUEST', password='')
sta_if = wifi.connect()

mqtt = Connector(
    mqtt_server="broker.hivemq.com",
    topic_sub=b"dispenser/comando",
    sub_callback=sub_callback
)

# Connessione iniziale
try:
    client = mqtt.connect_and_subscribe()
except OSError:
    restart_and_reconnect()


# Loop principale
while True:
    client.check_msg()  # Controlla messaggi MQTT in arrivo - # il messaggio qui √® un vincolo
    # per simulare; in eealt√† ci√≤ che invoca la callback non √® un messaggio nel 
    # nostro caso ma corrisponde all'i-esimo orario dell'i-esimo girono in cui deve 
    # prendere la medicina l'utente. 
    '''
    if ir_sensor.value() == 1:  # Rilevamento mano dell‚Äôutente
        print("ü§ö Mano rilevata - medicina prelevata!")
        client.publish(f"{MQTTTopics.topic_base}/{giorno}/{fascia}", b"presa")  # Notifica all‚Äôapp via broker
        led.on()  # Simula apertura dello sportello/indicatore - qui la funzione sarebbe accendere il led in funzione del giorno e dell'orario ( periodo della giornata) in cui √® stato invocato 
        sleep(10)  # Tempo per il prelievo
        client.publish(f"{MQTTTopics.topic_base}/{giorno}/{fascia}", b"resetta")  # Mando un comando di reset
    '''

